
# 1 "APP/APP_Beeper.c"

# 11 "APP/APP_Beeper.h"
typedef struct
{
unsigned short u16_Beeper_Frequency;
unsigned char u8_Beeper_Volume;
unsigned char u8_Beeper_Number;
}struct_Beeper;

typedef struct
{
unsigned short time_on;
unsigned short time_off;
}struct_time_beeper;

typedef enum
{
BEEPER_STATE_OFF,
BEEPER_STATE_ON,
}Beeper_State;

# 15 "APP/../HAL/HAL_Buzzer.h"
void HAL_Buzzer_GPIO_Init(void);
void HAL_Buzzer_PWM_Init(unsigned short frequency_Khz, unsigned char Duty);
void HAL_Buzzer_On(void);
void HAL_Buzzer_Off(void);

# 7 "APP/APP_Beeper.c"
struct_Beeper strt_Beeper_Value;
struct_time_beeper * p_strt_Time_Beep;
unsigned char u8_Number_Beep;
unsigned char u8_Current_Beep;
unsigned char u8_Beeper_State;


const struct_time_beeper BEEP_PRESS_OK = {200, 100};

const struct_time_beeper BEEP_ON_SETTING[2] = { {200,50} , {300,100} };

const struct_time_beeper BEEP_SETTING_OK[2] ={ {300,100}, {200,50} };

const struct_time_beeper BEEP_SETTING_ERROR[3] = {{200,100}, {200, 100}, {400,100}};

void BEEPER_Set_Volume_Frequency(unsigned short frequency, unsigned short Volume)
{
strt_Beeper_Value.u16_Beeper_Frequency = frequency;
switch(Volume)
{
case 0:
strt_Beeper_Value.u8_Beeper_Volume = 15;
break;
case 1:
strt_Beeper_Value.u8_Beeper_Volume = 30;
break;
case 2:
strt_Beeper_Value.u8_Beeper_Volume = 50;
break;
default:
strt_Beeper_Value.u8_Beeper_Volume = 50;
break;
}
HAL_Buzzer_PWM_Init(strt_Beeper_Value.u16_Beeper_Frequency, strt_Beeper_Value.u8_Beeper_Volume);
}

void BEEPER_Timer_Handler(void)
{
if(u8_Beeper_State == BEEPER_STATE_ON)
{
if(u8_Current_Beep < u8_Number_Beep)
{

u8_Beeper_State == BEEPER_STATE_OFF;
}
else
{

}
HAL_Buzzer_Off();
}
else
{
if(u8_Current_Beep < u8_Number_Beep)
{
u8_Current_Beep++;

u8_Beeper_State == BEEPER_STATE_ON;
HAL_Buzzer_On();
}
}
}

void BEEPER_Direct_Beep(void)
{
u8_Number_Beep = 1;
u8_Beeper_State = BEEPER_STATE_ON;
p_strt_Time_Beep = &BEEP_PRESS_OK;

HAL_Buzzer_On();
u8_Current_Beep = 0;
}

void BEEPER_On_Setting(void)
{
u8_Number_Beep = 2;
u8_Beeper_State = BEEPER_STATE_ON;
p_strt_Time_Beep = &BEEP_ON_SETTING;

HAL_Buzzer_On();
u8_Current_Beep = 0;
}

void BEEPER_Setting_OK(void)
{
u8_Number_Beep = 2;
u8_Beeper_State = BEEPER_STATE_ON;
p_strt_Time_Beep = &BEEP_SETTING_OK;

HAL_Buzzer_On();
u8_Current_Beep = 0;
}

void BEEPER_Setting_Error(void)
{
u8_Number_Beep = 3;
u8_Beeper_State = BEEPER_STATE_ON;
p_strt_Time_Beep = &BEEP_SETTING_ERROR;

HAL_Buzzer_On();
u8_Current_Beep = 0;
}

